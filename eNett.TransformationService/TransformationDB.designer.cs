#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace eNett.IntegrationHub.TransformationService
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Transformation")]
	public partial class TransformationDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertSourceSystem(SourceSystem instance);
    partial void UpdateSourceSystem(SourceSystem instance);
    partial void DeleteSourceSystem(SourceSystem instance);
    partial void InsertMapping(Mapping instance);
    partial void UpdateMapping(Mapping instance);
    partial void DeleteMapping(Mapping instance);
    #endregion
		
		public TransformationDBDataContext() : 
				base(global::eNett.IntegrationHub.TransformationService.Properties.Settings.Default.TransformationConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TransformationDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TransformationDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TransformationDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TransformationDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<SourceSystem> SourceSystems
		{
			get
			{
				return this.GetTable<SourceSystem>();
			}
		}
		
		public System.Data.Linq.Table<Mapping> Mappings
		{
			get
			{
				return this.GetTable<Mapping>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SourceSystem")]
	public partial class SourceSystem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SourceSystemID;
		
		private string _Name;
		
		private EntitySet<Mapping> _Mappings;
		
		private EntitySet<Mapping> _Mappings1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSourceSystemIDChanging(int value);
    partial void OnSourceSystemIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public SourceSystem()
		{
			this._Mappings = new EntitySet<Mapping>(new Action<Mapping>(this.attach_Mappings), new Action<Mapping>(this.detach_Mappings));
			this._Mappings1 = new EntitySet<Mapping>(new Action<Mapping>(this.attach_Mappings1), new Action<Mapping>(this.detach_Mappings1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourceSystemID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SourceSystemID
		{
			get
			{
				return this._SourceSystemID;
			}
			set
			{
				if ((this._SourceSystemID != value))
				{
					this.OnSourceSystemIDChanging(value);
					this.SendPropertyChanging();
					this._SourceSystemID = value;
					this.SendPropertyChanged("SourceSystemID");
					this.OnSourceSystemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SourceSystem_Mapping", Storage="_Mappings", ThisKey="SourceSystemID", OtherKey="DestinationSystemID")]
		public EntitySet<Mapping> Mappings
		{
			get
			{
				return this._Mappings;
			}
			set
			{
				this._Mappings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SourceSystem_Mapping1", Storage="_Mappings1", ThisKey="SourceSystemID", OtherKey="SourceSystemID")]
		public EntitySet<Mapping> Mappings1
		{
			get
			{
				return this._Mappings1;
			}
			set
			{
				this._Mappings1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Mappings(Mapping entity)
		{
			this.SendPropertyChanging();
			entity.DestinationSystem = this;
		}
		
		private void detach_Mappings(Mapping entity)
		{
			this.SendPropertyChanging();
			entity.DestinationSystem = null;
		}
		
		private void attach_Mappings1(Mapping entity)
		{
			this.SendPropertyChanging();
			entity.SourceSystem = this;
		}
		
		private void detach_Mappings1(Mapping entity)
		{
			this.SendPropertyChanging();
			entity.SourceSystem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Mapping")]
	public partial class Mapping : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MappingID;
		
		private int _SourceSystemID;
		
		private int _DestinationSystemID;
		
		private string _SourceTableName;
		
		private string _DestinationTableName;
		
		private string _SourceColumnName;
		
		private string _DestinationColumnName;
		
		private EntityRef<SourceSystem> _SourceSystem;
		
		private EntityRef<SourceSystem> _SourceSystem1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMappingIDChanging(int value);
    partial void OnMappingIDChanged();
    partial void OnSourceSystemIDChanging(int value);
    partial void OnSourceSystemIDChanged();
    partial void OnDestinationSystemIDChanging(int value);
    partial void OnDestinationSystemIDChanged();
    partial void OnSourceTableNameChanging(string value);
    partial void OnSourceTableNameChanged();
    partial void OnDestinationTableNameChanging(string value);
    partial void OnDestinationTableNameChanged();
    partial void OnSourceColumnNameChanging(string value);
    partial void OnSourceColumnNameChanged();
    partial void OnDestinationColumnNameChanging(string value);
    partial void OnDestinationColumnNameChanged();
    #endregion
		
		public Mapping()
		{
			this._SourceSystem = default(EntityRef<SourceSystem>);
			this._SourceSystem1 = default(EntityRef<SourceSystem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MappingID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MappingID
		{
			get
			{
				return this._MappingID;
			}
			set
			{
				if ((this._MappingID != value))
				{
					this.OnMappingIDChanging(value);
					this.SendPropertyChanging();
					this._MappingID = value;
					this.SendPropertyChanged("MappingID");
					this.OnMappingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourceSystemID", DbType="Int NOT NULL")]
		public int SourceSystemID
		{
			get
			{
				return this._SourceSystemID;
			}
			set
			{
				if ((this._SourceSystemID != value))
				{
					if (this._SourceSystem1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSourceSystemIDChanging(value);
					this.SendPropertyChanging();
					this._SourceSystemID = value;
					this.SendPropertyChanged("SourceSystemID");
					this.OnSourceSystemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DestinationSystemID", DbType="Int NOT NULL")]
		public int DestinationSystemID
		{
			get
			{
				return this._DestinationSystemID;
			}
			set
			{
				if ((this._DestinationSystemID != value))
				{
					if (this._SourceSystem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDestinationSystemIDChanging(value);
					this.SendPropertyChanging();
					this._DestinationSystemID = value;
					this.SendPropertyChanged("DestinationSystemID");
					this.OnDestinationSystemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourceTableName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string SourceTableName
		{
			get
			{
				return this._SourceTableName;
			}
			set
			{
				if ((this._SourceTableName != value))
				{
					this.OnSourceTableNameChanging(value);
					this.SendPropertyChanging();
					this._SourceTableName = value;
					this.SendPropertyChanged("SourceTableName");
					this.OnSourceTableNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DestinationTableName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string DestinationTableName
		{
			get
			{
				return this._DestinationTableName;
			}
			set
			{
				if ((this._DestinationTableName != value))
				{
					this.OnDestinationTableNameChanging(value);
					this.SendPropertyChanging();
					this._DestinationTableName = value;
					this.SendPropertyChanged("DestinationTableName");
					this.OnDestinationTableNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourceColumnName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string SourceColumnName
		{
			get
			{
				return this._SourceColumnName;
			}
			set
			{
				if ((this._SourceColumnName != value))
				{
					this.OnSourceColumnNameChanging(value);
					this.SendPropertyChanging();
					this._SourceColumnName = value;
					this.SendPropertyChanged("SourceColumnName");
					this.OnSourceColumnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DestinationColumnName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string DestinationColumnName
		{
			get
			{
				return this._DestinationColumnName;
			}
			set
			{
				if ((this._DestinationColumnName != value))
				{
					this.OnDestinationColumnNameChanging(value);
					this.SendPropertyChanging();
					this._DestinationColumnName = value;
					this.SendPropertyChanged("DestinationColumnName");
					this.OnDestinationColumnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SourceSystem_Mapping", Storage="_SourceSystem", ThisKey="DestinationSystemID", OtherKey="SourceSystemID", IsForeignKey=true)]
		public SourceSystem DestinationSystem
		{
			get
			{
				return this._SourceSystem.Entity;
			}
			set
			{
				SourceSystem previousValue = this._SourceSystem.Entity;
				if (((previousValue != value) 
							|| (this._SourceSystem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SourceSystem.Entity = null;
						previousValue.Mappings.Remove(this);
					}
					this._SourceSystem.Entity = value;
					if ((value != null))
					{
						value.Mappings.Add(this);
						this._DestinationSystemID = value.SourceSystemID;
					}
					else
					{
						this._DestinationSystemID = default(int);
					}
					this.SendPropertyChanged("DestinationSystem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SourceSystem_Mapping1", Storage="_SourceSystem1", ThisKey="SourceSystemID", OtherKey="SourceSystemID", IsForeignKey=true)]
		public SourceSystem SourceSystem
		{
			get
			{
				return this._SourceSystem1.Entity;
			}
			set
			{
				SourceSystem previousValue = this._SourceSystem1.Entity;
				if (((previousValue != value) 
							|| (this._SourceSystem1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SourceSystem1.Entity = null;
						previousValue.Mappings1.Remove(this);
					}
					this._SourceSystem1.Entity = value;
					if ((value != null))
					{
						value.Mappings1.Add(this);
						this._SourceSystemID = value.SourceSystemID;
					}
					else
					{
						this._SourceSystemID = default(int);
					}
					this.SendPropertyChanged("SourceSystem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
